---

- name: Get the jenkins_plugin_cli jarfile.
  get_url:
    url: "{{ jenkins_plugin_cli_url }}"
    dest: "{{ jenkins_plugin_cli_location }}"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: '0755'
  register: jarfile_get
  until: "'OK' in jarfile_get.msg or '304' in jarfile_get.msg or 'file already exists' in jarfile_get.msg"
  retries: 5
  delay: 10
  check_mode: false

- name: Create Jenkins updates directory.
  file:
    path: "{{ jenkins_home }}/updates"
    state: directory
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: 0755

- name: Download current plugin updates center from Jenkins update site.
  get_url:
    url: "{{ jenkins_updates_center_url }}"
    dest: "{{ jenkins_home }}/updates/default.json"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: 0440
  changed_when: false
  register: get_result
  until: "'OK' in get_result.msg or '304' in get_result.msg or 'file already exists' in get_result.msg"
  retries: 5
  delay: 10

- name: Remove first and last line from Jenkins update site json file.
  replace:  # noqa 208
    path: "{{ jenkins_home }}/updates/default.json"
    regexp: "1d;$d"

- name: Download current plugin versions from Jenkins update site.
  get_url:
    url: "{{ jenkins_plugin_info_url }}"
    dest: "{{ jenkins_home }}/updates/plugin-versions.json"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: 0440
  changed_when: false
  register: get_result
  until: "'OK' in get_result.msg or '304' in get_result.msg or 'file already exists' in get_result.msg"
  retries: 5
  delay: 10

- name: Run the jenkins plugins CLI.
  shell: >
    ## Enable flags based on the ansible variables
    if [ -z "{{ plugins }}" ] ; then
      plugins_flag="--plugins {{ plugins }}"
    fi
    if [ -e "{{ jenkins_home }}/plugins.txt" ] ; then
      plugin_file_flag="--plugin-file {{ jenkins_home }}/plugins.txt"
    fi
    if [ -e "{{ jenkins_home }}/updates/default.json" ] ; then
      jenkins_update_center_flag="--jenkins-update-center file:////{{ jenkins_home }}/updates/default.json"
    fi
    if [ -e "{{ jenkins_home }}/updates/plugin-versions.json" ] ; then
      jenkins_plugin_info_flag="--jenkins-plugin-info file:////{{ jenkins_home }}/updates/plugin-versions.json"
    fi
    if [ "{{ skip_failed_plugins }}" == "true" ] ; then
      skip_failed_plugins_flag="--skip-failed-plugin"
    fi
    java -jar {{ jenkins_plugin_cli_location }} \
      --verbose \
      --war {{ jenkins_war_location }}
      ${plugins_flag} \
      ${plugin_file_flag} \
      ${skip_failed_plugins} \
      ${jenkins_update_center_flag} \
      ${jenkins_plugin_info_flag} \
  changed_when: true
